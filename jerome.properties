package com.fchan.business.cron;

import lombok.Data;

/**
 * 定义时间和实际执行任务的class
 */

@Data
public class QuartzBean {

    /** 任务id */
    private String  id;

    /** 任务名称 */
    private String jobName;

    /** 任务执行类 */
    private String jobClass;

    /** 任务状态 启动还是暂停*/
    private Integer status;

    /** 任务运行时间表达式 */
    private String cronExpression;


}
package com.fchan.business.utils;

import com.fchan.business.cron.QuartzBean;
import lombok.extern.slf4j.Slf4j;
import org.quartz.*;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.Objects;

@Slf4j
public class CronUtil {


    /**
     * 创建一个定时任务
     * @param scheduler
     * @param quartzBean
     */
    public static void createScheduleJob(Scheduler scheduler, QuartzBean quartzBean){
        try {

            //反射获取实际执行任务的class
            Class<? extends Job> jobClass = (Class<? extends Job>) Class.forName(quartzBean.getJobClass());

            //构建任务信息，实际执行的任务类
            JobDetail jobDetail = JobBuilder
                                        .newJob(jobClass)
                                        //jobName需要保证唯一
                                        .withIdentity(quartzBean.getJobName())
                                        .build();

            //设置执行方式为cron
            CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder
                    .cronSchedule(quartzBean.getCronExpression())
                    //阻塞的过期任务立即执行
                    .withMisfireHandlingInstructionFireAndProceed();

            //关联触发器和cron执行器
            CronTrigger cronTrigger = TriggerBuilder
                    .newTrigger()
                    .withIdentity(quartzBean.getJobName())
                    .withSchedule(cronScheduleBuilder)
                    .build();



            //检查任务是否过期
            Date nextFireTime = cronTrigger.getFireTimeAfter(new Date());
            if(Objects.isNull(nextFireTime)){
                log.info("任务已过期，job：{}", quartzBean);
                return;
            }

            //按照cron时间开始运行任务，并且时间已经过期则创建时会报错，提示过期
            scheduler.scheduleJob(jobDetail, cronTrigger);
        } catch (ClassNotFoundException | SchedulerException e) {
            throw new RuntimeException(e);
        }

    }


    /**
     * 更新当前正在运行的任务的cron时间
     * @param scheduler
     * @param quartzBean
     */
    public static void updateJobTime(Scheduler scheduler, QuartzBean quartzBean){

        //build触发key
        TriggerKey triggerKey = TriggerKey.triggerKey(quartzBean.getJobName());

        String cronExpression = quartzBean.getCronExpression();

        //build新的cron执行器
        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression);

        try {

            //获取当前正在运行的触发器
            CronTrigger cronTrigger = (CronTrigger) scheduler.getTrigger(triggerKey);

            if(Objects.isNull(cronTrigger)){
                log.error("未找到触发器，jobName:{}", quartzBean.getJobName());
                return;
            }

            //根据新的执行器重新关联触发器
            cronTrigger = cronTrigger
                                .getTriggerBuilder()
                                .withIdentity(triggerKey)
                                .withSchedule(cronScheduleBuilder)
                                .build();

            log.info("重置了任务时间" + LocalDateTime.now());

            //重置对应的job
            scheduler.rescheduleJob(triggerKey, cronTrigger);
        } catch (SchedulerException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * 暂停任务
     * @param scheduler
     * @param jobName
     */
    public static void pauseJob(Scheduler scheduler, String jobName){
        JobKey jobKey = JobKey.jobKey(jobName);

        try {
            scheduler.pauseJob(jobKey);
        } catch (SchedulerException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * 恢复暂停的任务
     * @param scheduler
     * @param jobName
     */
    public static void resumeJob(Scheduler scheduler, String jobName){
        JobKey jobKey = JobKey.jobKey(jobName);
        try {
            scheduler.resumeJob(jobKey);
        } catch (SchedulerException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * 删除任务
     * @param scheduler
     * @param jobName
     */
    public static void deleteJob(Scheduler scheduler, String jobName){
        JobKey jobKey = JobKey.jobKey(jobName);
        try {
            scheduler.deleteJob(jobKey);
        } catch (SchedulerException e) {
            throw new RuntimeException(e);
        }
    }


}
